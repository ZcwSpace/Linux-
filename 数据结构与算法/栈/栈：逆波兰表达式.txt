#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define TYPE double
struct b
{
	TYPE *base;
	TYPE *top;
	int stack_size;
};
void create_stack(struct b *s);
void push_stack(struct b *s, TYPE e);
TYPE pop(struct b *s);
int stack_length(struct b *s);
int main()
{
	struct b stack;
	int i=0;
	double d, s1, s2;
	char e,str[20];
	create_stack(&stack);
	printf("请输入后缀表达式:");
	scanf_s("%c", &e, 1);
	while (isdigit(e)||e=='.')
	{
		str[i++] = e;
		str[i] = '\0';
		scanf_s("%c", &e, 1);
		if (e == ' ')
		{
			d = atof(str);
			push_stack(&stack, d);
			i = 0;
			break;
		}
	}
	while (e != '#')
	{
		scanf_s("%c", &e, 1);
		while (isdigit(e) || e == '.')
		{
			str[i++] = e;
			str[i] = '\0';
			scanf_s("%c", &e, 1);
			if (e == ' ')
			{
				d = atof(str);
				push_stack(&stack, d);
				i = 0;
				break;
			}
		}
		switch (e)
		{
		case '+':
			s1 = pop(&stack) ;
			s2 = pop(&stack) ;
			d = s2 + s1 ;
			push_stack(&stack, d);
			printf("%f\n", d);
			break;
		case '-':
			s1 = pop(&stack) ;
			s2 = pop(&stack) ;
			d = s2 - s1 ;
			push_stack(&stack, d);
			printf("%f\n", d);
			break;

		case '*':
			s1 = pop(&stack) ;
			s2 = pop(&stack) ;
			d = s2 * s1;
			push_stack(&stack, d);
			printf("%f\n", d);
			break;
		case '/':
			s1 = pop(&stack) ;
			s2 = pop(&stack) ;
			d = s2 / s1 ;
			push_stack(&stack, d);
			printf("%f\n", d);
			break;
		}
	}
	getchar();
	i=stack_length(&stack);
	printf("%d\n", i);
	s1 = pop(&stack) ;
	printf("%f",s1 );
}
#define SIZE 100
void create_stack(struct b *s)
{
	s->base = (TYPE *)malloc(SIZE * sizeof(TYPE));
	if (!s->base)
	{
		exit(0);
	}
	s->top = s->base;
	s->stack_size = SIZE;
}
void push_stack(struct b *s, TYPE e)
{
	if (s->top - s->base >= s->stack_size)
	{
		s->base = (TYPE *)realloc(s->base, (s->stack_size + SIZE) * sizeof(TYPE));
		if (!s->base)
		{
			exit(0);
		}
		s->top = s->base + s->stack_size;
		s->stack_size = s->stack_size + SIZE;
	}
	*(s->top) = e;
	s->top++;
}
TYPE pop(struct b *s)
{
	TYPE e;
	if (s->top == s->base)
	{
		return 0;
	}
	e = *--(s->top);
	return e;
}
int stack_length(struct b *s)
{
	return(s->top - s->base);
}


