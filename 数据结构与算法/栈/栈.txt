#include <stdio.h>
#include <stdlib.h>
struct b
{
	int *base;
	int *top;
	int stack_size;
};
void create_stack(struct b *s);
void push_stack(struct b *s, int e);
void pop(struct b *s);
void clear(struct b *s);
void destory(struct b *s);
int stack_length(struct b *s);
int main()
{
	struct b stack;
	int e,i;
	create_stack(&stack);
	printf("请输入数字:");
	for (i = 0;i <= stack.stack_size;i++)
	{
		scanf_s("%d", &e);
		if (e == 0)
		{
			break;
		}
		push_stack(&stack, e);
	}
	printf("请输入你想要取出几个：");
	scanf_s("%d", &e);
	if (e != 0)
	{
		for (i = 1;i <= e;i++)
		{
			pop(&stack);
		}
	}
	e=stack_length(&stack);
	printf("当前栈的容量为：%d\n", e);
	clear(&stack);
	for (stack.top--;stack.top >= stack.base;stack.top--)
	{
		printf("%d ", *(stack.top));
	}
	return 0;
}
#define SIZE 100
void create_stack(struct b *s)
{
	s->base = (int *)malloc(SIZE * sizeof(int));
	if (!s->base)
	{
		exit(0);
	}
	s->top = s->base;
	s->stack_size = SIZE;
}
void push_stack(struct b *s, int e)
{
	if (s->top - s->base >= s->stack_size)
	{
		s->base = (int *)realloc(s->base, (s->stack_size + SIZE)* sizeof(int));
		if (!s->base)
		{
			exit(0);
		}
		s->top = s->base + s->stack_size;
		s->stack_size = s->stack_size + SIZE;
	}
	*(s->top) = e;
	s->top++;
}
void pop(struct b *s)
{
	if (s->top == s->base)
	{
		return;
	}
	*(s->top) = *((s->top)--);
}
void clear(struct b *s)
{
	s->top = s->base;
}
void destory(struct b *s)
{
	int i, len;
	len = s->stack_size;
	for (i = 0;i < len;i++)
	{
		free(s->base);
		s->base++;
	}
	s->base = s->top = NULL;
	s->stack_size = 0;
}
int stack_length(struct b *s)
{
	return(s->top - s->base);
}

