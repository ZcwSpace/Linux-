
=====================================-====================================================================
============================物联网、嵌入式技术课程 之 《C深度解析》=======================================
==========================================================================================================
					
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------

第7章 结构体、联合体、枚举	

目录：
1. 结构体
	1.1 为什么需要结构体？
	1.2 对比c、c++、java的面向对象的特性
	1.3 定义结构体变量	
	1.4 向结构体变量的给值
	1.5 结构体变量的成员访问
	1.6 结构体成员的对齐
			默认对齐方式 
			#pragma pack(n)手动对齐 
			__attribute__((aligned(n)))手动对齐
			
	1.7 offsetof宏和contaner_of宏
	1.8 结构体内嵌函数指针（c模拟面向对象思想）
			讲分层，程序模块化等。
	
2. 共用体
	2.1 共用体与结构体的异同
	2.2 当初设计出共用体的目的
	2.3 共用体的使用举例

	
3. 枚举
	3.1 枚举怎么来的
	3.2 宏定义的问题
	3.3 枚举的详细情况


	
1. 结构体
1.1 为什么需要结构体？
		因为c语言有描述对象的需求，而结构体就是用来保存对象信息的，大家千万不要误认为只有面向对象的语言才
	有描述对象的需求，任何一种语言都有描述对象的需求，至于为什么有“面向过程语言”和“面向对象语言”的区别，
	我们后面再介绍这个问题。
		
		任何一个对象都包含很多的属性，比如人就包含身高、年龄、姓名、籍贯、性别等等，但是普通的变量和数组都
	不能很好的用于描述对象，
	
	（1）使用普通变量
			int Height;
			short age;
			char name[30];
			char NativePlace[100];  //籍贯
			char gender;
	
			缺点非常明显，变量散列着，无法被很好的集中管理。
			
	（2）使用数组
			由于数组每个元素的类型的都是同质的，比如int buf[10]的每个元素的类型都是int，而不同属性的类型是
		不一定相同的，比如身高的类型为int，name的类型为char，显然是无法使用数组来描述的。
	
	（3）使用结构体描述
			显然结构体非常适合用来描述对象。
			
			//结构体类型，这个类型还不能称为对象，只是描述对象的一个模型。
			//在编译之后，类型不再起作用，在程序运行过程中，起作用的是变量。
			struct People  
			{
				int Height;
				short age;
				char name[30];
				char NativePlace[100]; //籍贯
				char gender;
			};
		
		struct People ZhangSan = {172, 25, "zhangsan", "hubei", 'M'}; //结构体变量
		
		
1.2 对比c、c++、java的面向对象特性		
	前面说过，任何语言都有描述对象的需求，但是能够描述对象并不能代表是面向对象的语言，因为面向对象的语言
不仅能够描述对象，而且还有更加深入的面向对象的特性，因此才能算做是面向对象的语言。
	
1.2.1 面向对象语言的三大特性
（1） 封装：
		在面向对象的语言中，变量、函数，几乎所有的东西都被封装在了“类”中，类与结构体是相似的东西。
		所谓将函数封装在类中，其实就是将函数定义也包含在中，在面向对象语言中，主体就是各种类，使用函数和
	变量时，都是通过类（对象）来访问的。
		
（2）继承：从父类可以继承到子类中
（3）多态：这一点不太好描述，这里就不再深入介绍。
		
	面向对象的语言的这三大特性，在面向过程的语言中是没有的。

1.2.2 C语言
	c语言属于非常典型的“面向过程语言”，c语言只有最基本的结构体封装特性，没有继承和多态的特性，因此c语言
只是一个面向过程的语言。
	而且c结构体的封装特性与“面向对象语言”类的封装特性相比，c结构体不能封装函数，也就是说在c语言中，函数
不能定义在结构体里面，在面向过程的语言中，最大的特点就是，函数都是独立外部的，访问函数时都是直接访
问的，不需要通过类/对象去访问。

		面向对象语言的类：比如java
		
			struct People
			{
			}
			
			class People
			{
				int Height;
				short Age;
				char Name[30];
				char NativePlace[100];  //籍贯
				char Gender;
				
				void print(void)
				{
					System.out.println(Height);
					System.out.println(age);
					System.out.println(name);
					System.out.println(NativePlace);
					System.out.println(gender)t;
				}
				//其它函数
				...
			}
			
		c语言：
			struct People
			{
				int Height;
				short Age;
				char Name[30];
				char NativePlace[100];  //籍贯
				char Gender;
			};
			
			//函数只能在外部独立存在，不能定义在结构体，C++可以将函数定义在结构体里面
			void print(struct People pel)
			{
				printf("%d", pel.Height);
				printf("%d", pel.age);
				printf("%d", pel.name);
				printf("%d", pel.NativePlace);
				printf("%d", pel.gender);
			}
			
			//其它函数
			...
		
		正是由于以上差别，使得面向过程语言与面向对象之间的直观区别就是，在面向过程的语言中，函数都是一个
	一个独立的存在，但是在面向对象语言中，函数定义都被包含在了类（结构体）的内部。
		
		不过c++算是一个特例，因为c++向前兼容c语法，因此c++既有c的面向过程的特性，也有面向对象的特性，因此
	在c++中既有独立的函数，也可以有被类/结构体封装的函数。

1.2.3 c模拟面向对象思想
		虽然在c的结构体中不能直接定义函数，但是可以定义函数指针变量,用于存放函数指针，以函数指针的方式来变
	相的封装函数，像这样的情况，我们称为模拟面向对象的思想，有关这一点后面还会讲到。
		struct People
		{
			int Height;
			short Age;
			char Name[30];
			char NativePlace[100];  //籍贯
			char Gender;
			void (*printFun)(); //函数指针变量
		};
		struct People zhangSan = {172, 25, "zhangsan", "hubei", 'M', print};
		
		//函数只能在外部独立存在，不能定义在结构体
		void print(struct People pel)
		{
			printf("%d", pel.Height);
			printf("%d", pel.age);
			printf("%s", pel.name);
			printf("%s", pel.NativePlace);
			printf("%c", pel.gender);
		}
		
		不过这里只是在模拟而已，与真正的面向对象还是有非常大的差距的，因为c不支持“继承”和“多态”，并不是真正
	的面向对象，或者说不是完整的面向对象。

	
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------
	
1.3 定义结构体变量
1.3.1 普通情况
	struct People
	{
		int Height;
		short Age;
		char Name[30];
		char NativePlace[100];  //籍贯
		char Gender;
	}zhangSan; 
	
	struct People zhangSan;
	
1.3.2 特殊情况：将结构体类型名省略
	struct           //people可以被省略
	{
		int Height;
		short Age;
		char Name[30];
		char NativePlace[100];  //籍贯
		char Gender;
	}zhangSan;
	
		不过省略了结构体类型名后，结构体变量只能放在}的后面，这种方式用的不多，一般只有临时使用结构体类型时，
	才会这么定义。
	
1.4 向结构体变量给值
1.4.1 初始化
	对于数组来说，初始化分为完全初始化、部分初始化、个别初始化，事实上结构体的初始化也分这几种初始化，
	我们还是以struct People为例来介绍
	struct People
	{
		int Height;
		short Age;
		char Name[30];
		char NativePlace[100];  //籍贯
		char Gender;
	}; 

（0）初始化为0
		int buf[10] = {};

		struct People zhangSan = {};
		
		将整个结构体变量空间初始化为0。
		
（1）完全初始化
		struct People zhangSan = {
			172, 
			25, 
			"zhangsan", 
			"hubei", 
			'M'
		}; //所有成员都被初始化
		
		初始化值的顺序必须与成员的顺序一直，否者就会出问题。
		
		也可以使用另一个结构体变量来初始化。
		struct People wangWu = zhangSan;
		
		
（2）部分初始化
		struct People zhangSan = {172, 25, "zhangsan"};//只初始化部分成员
		
		进行部分初始化时必须是顺序进行的，不能跳跃着初始化。
	
	
（3）个别初始化
		int buf[10] = {[0]=10, [8]=20, [2]=3};

		struct People zhangSan = {
			.Height=172, 
			.Gender='M', 
			.Age=25
		};
		
		个别初始化时，通过需要通过.来访问成员，然后对其进行初始化，个别初始化时，对成员顺序没有什么要求。
	
	
（4）结构体数组的初始化
		1）整个为数组，就按照数组的初始化方式来初始化，比如完全初始化、部分初始化、个别初始化
		2）每个元素为一个结构体变量，就按照结构体变量的初始化方式来初始化，同样也支持完全初始化、部分初始化、个别初始化
		
		struct People zhangSan[3] = {
			{172, 25, "zhangsan", "hubei", 'M'}, 
			{.Height=172, .Gender='M', .Age=25},
		};
		
		整个数组为部分初始化，第一个元素为完全初始化，第二个为个别初始化。
		
		
1.4.2 赋值	
（1）个别成员赋值
		struct People zhangSan;
		
		zhangSan.Height = 172;
		zhangSan.Age = 25;
		strcpy(zhangSan.Name, "zhangsan"); 
		strcpy(zhangSan.NativePlace, "hubei"); 
		zhangSan.Gender = 'M';
		
		//错误示例
		zhangSan.Name = "zhangsan";
		zhangSan.NativePlace = "hubei";

		
		Name和NativePlace是数组，数组是不能整体赋值的，要么通过循环给数组的每个元素赋值，要么调用strcpy
	函数来赋值。
	
		也可以使用memcpy来赋值: 
		strcpy(zhangSan.Name, "zhangsan"); 
		memcpy((void *)zhangSan.Name, (void *)"zhangsan", sizeof("zhangsan"));
		
		
（2）整体赋值
		前面说过数组是不允许整体赋值的，比如：
		int buf[5];
		buf = {0, 1, 2, 3, 4}; //不可以
		
		int buf[5] = {0, 1, 2, 3, 4};
		int buf1[5];
		buf = buf1; //不可以
	
	
		但是结构体变量可以，不过只能使用另一个结构体变量来整体赋值：
		struct People zhangSan;
		zhangSan = {172, 25, "zhangsan", "hubei", 'M'}; //不可以
		
		但是如下是可以的：
		struct People zhangSan = {172, 25, "zhangsan", "hubei", 'M'};
		struct People wangWu;
		wangWu = zhangSan; //可以
		
		

		
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------
	
1.5 结构体变量的成员访问
1.5.1 使用.访问
	通过“结构体变量”访问成员时使用的都是.，在前面进行结构体变量的个别初始化、以及赋值时，就已经使用.。
	
1.5.2 使用->访问
		通过“结构体变量的指针”来访问成员时，使用的就是->，事实上结构体指针也可以使用.来访问成员。
		
		struct People zhangSan;
		struct People *p1 = &zhangSan; //将结构体变量zhangSan的指针放到p1中，结构体变量的指针就是
																	 //变量第一个字节的地址。
		
		p1指向了zhangSan结构体变量空间，使用*解引用后，*p1代表的就是zhangSan这个变量空间，得到结构体变量
	空间后，就可以使用.来访问成员。
	
	(*p1).Height = 172;
	(*p1).Age = 25;
	
	strcpy((*p1).Name, "zhangSan");
	strcpy((*p1).NativePlace, "hubei");
	
	(*p1).Gender = 'M';
	
		这里一定要加()，因为.的优先级要高于*，所以如果不加()的话，就变成了*p1.Gender(等价于*(p1.Gender))，
	这句话在语法上是不同的，编译会出错。
		
		
	疑问：我怎么知道符号优先级情况是怎么样子的呢？
	答：这个需要查看符号优先级表，实际上这个符号优先级表不需要我们记忆，大部分的符号优先级是符合我们的
	直觉的，至于里面不符合直觉的符号优先级和结合方向，比如像.和*这种，它的优先级就不符合我们的直接，
	当涉及到时，我们会单独的介绍。
		
		显然(*p1).这种访问方式使用起来很不方便，很容易写错，比如错写成*(p1).等形式，所以c给出了->的写法，
		(*p1).等价于->。
		
		p1->Height = 172;
		p1->Age = 25;
		
		strcpy(p1->Name, "zhangSan");
		strcpy(p1->NativePlace, "hubei");
		
		p1->Gender = 'M';
			
			p1：为结构体指针变量，里面放的是结构体变量指针
			p1->：等价于(*p1).，代表的是p1所指向的zhangSan这个结构体变量空间。
			p1->Gender：等价于(*p1).Gender，为zhangSan的Gender成员。

			
1.6 结构体的传参
	根据需求，我们可以传递整个结构体变量、整个结构体变量的指针，传递某个成员的值、成员的指针。
	
	数组是不能整体传参的，结构体可以整体传参，因为结构体可以整体初始化
		void fun(struct People arg)
		{
			...
		}
	
		int main(void)
		{
			struct People zhangSan = {172, 25, "zhangsan", "hubei", 'M'};
			
			fun(zhangSan);
			
			return 0;
		}
		
		struct People arg = zhangSan;
		
	传递整个结构体变量，也就是在使用实参去初始化结构体形参变量。
	
	但是为了提高效率，我们建议传递结构体变量的指针。
	
	
	
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------
		
1.6 结构体的对齐（结构体成员的对齐）
		事实上对于结构体成员对齐来说，我们可以不用太过关心，因为默认就是对齐的，但是我们这里还需要
	介绍一下结构体对齐，因为我们想借着讲“结构体对齐”来介绍其它相关知识点。
		
1.6.1 为什么要对齐？		
		对齐可以让硬件更加快速的访问变量，总之对齐有利于提高空间的访问效率，这就跟现实中存放物品时，按照
	物体的尺寸来对齐存放，会让物品的管理更加的规范，这样能够有效的提高我们存取物品的效率。
	至于为什么在硬件上访问对齐变量空间时效率更高，这个我们不深究，因为这个涉及到底层硬件的内部原理。
		
1.6.2 结构体变量内部成员的对齐
（1）结构体大小
		 在前面的课程中我们就说过，结构体的大小不能简单的等于各个成员大小之和，比如下面两个结构体：
			struct A
			{
		      int    a;
		      char   b;
		      short  c;
		  };
			
		  struct B
			{
		      char   b;
		      int    a;
		      short  c;
		  };
			
		这两个结构体成员唯一的不同就是成员顺序，但是它们各自的大小是不一样的，
			printf("%d\n", sizeof(struct A));  //打印结果：8
			printf("%d\n", sizeof(struct B));  //打印结果：12
			
			不管是8还是12，都大于成员之和（7字节）。
			
			结构体大小为什么不等于成员大小之和，以及为什么结构体成员顺序调整之后，结构体的大小也会发生变化，
		当大家理解结构体对齐之后，大家自然就能理解，到那时，就算不使用sizeof来测试，我们自己也能够计算
		出结构体的大小。	
	
			
（2）结构体成员对齐的规则
		首先我们要明白，结构体成员的对齐，是由编译器在编译“结构体”时来实现的，一般来说编译器默认会按照
	4字节来对齐，当然不同的编译器、不同的平台可能有所不同，目前我使用的gcc编译器默认是按照8字节对齐。
	这个4或8为对齐系数。
		
		具体的对齐规则如下：
		1）每个成员的地址相对于结构体变量第一个字节地址的偏移，必须整除成员的“对齐值”
			（a）如果成员大小<8字节，成员的“对齐值”为自身大小
			（b）如果成员大小>=8字节，成员的“对齐值”为8
				
		2）整个结构体变量的大小为最大对齐值的整数倍
			
		
（3）对齐举例	
		1）例子1
			定义如下这样一个结构体
			struct kk
			{
				char a; 			//1<8，a的对齐值为1
				short b; 			//2<8，b的对齐值为2
				int c; 				//4<8，c的对齐值为4
				long long d; 	//8>=8，d的对齐值为8
			}yy;
			
		（a）每个成员的地址相对于结构体变量第一个字节地址
				的偏移，必须整除成员的“对齐值”
				
		（b）整个结构体变量的大小为最大对齐值的整数倍
					
				yy在内存中的结构图。
				图1：
						
				
				
				从这张图中可以看出，结构体变量的大小为16字节，printf("sizeof(yy) = %d\n", sizeof(yy))打印验证的
			结果也为16个字节。				
				
				而且由于对齐的缘故，结构体成员之间并不是紧密相连的，中间可能有空隙（空字节），这个空隙就是由
			成员对齐导致的。
			
				如果你那里的结果与我们对不上，说明你所使用的编译器默认给的“对齐系数”，与我在这边的不相同。
			
		2）例子2
				struct kk
				{
					short b; 			//2<8，b的对齐值为2
					int c; 				//4<8，c的对齐值为4
					char a; 			//1<8，a的对齐值为1
					long long d; 	//8>=8，d的对齐值为8
				}yy;
				yy的大小必须为最大对齐值8的整数倍。
				
				
				结构体成员还是那些，但是被调整了顺序，按照之前的规则，yy变量的内存结构图为：
				图2：
				
				
				yy空间大小：24字节


	
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
			
1.6.3 结构体手动对齐1：#pragma
		
		结构体变量默认就是对齐的，我们所用的gcc编译器的“对齐系数”为8，事实上我们完全可以自己指定这个对
	齐系数，自己指定时就是“手动对齐”。
	
		手动对齐有什么意义呢？
		有关这个问题，后面介绍。
	
（1）#pragma 	
		在第2章中，我们一早就介绍过#pragma这个预编译指令，它有很多功能，目前要使用的是它的手动对齐的功能。
		
		1）使用格式
			
			//n为我们手动指定的对齐系数，n可以指定的值一般为1/2/4/8/16，再大就没有意义了，
			//为什么没意义，将后面的介绍完之后，大家自然就理解了
			#pragma pack(n)  
			...
			
			struct ***  	//按照n（对齐系数）来对齐
			{
				...
			}
			
			...
			#pragma pack() //还原为之前的对齐方式
			
				#pragma后面可以跟很多不同的东西，跟的东西不同，所要实现的通过功能也是不同，我们这里跟的是pack，
			表示要实现的是手动对齐功能。
			
			使用#pragma pack(n)手动对齐时，对齐规则不变。
			
		（a）每个成员的地址相对于结构体变量第一个字节地址的偏移，必须整除成员的“对齐值”
				・ 如果成员大小<“对齐系数”，成员的“对齐值”为自身大小
				・ 如果成员大小>=“对齐系数”，成员的“对齐值”为“对齐系数”
					
		（b）整个结构体变量的大小为最大对齐值的整数倍
				
				
		而且#pragma pack()为c标准语法特性，所以所有的编译器都支持，自然gcc也支持。
		
		
		2）例子1
			/*  默认按照8字节对齐，大小为16 */
			struct kk1
			{       
				char a;			//1<8，对齐值为1
				short b;		//2<8，对齐值为2
				int c;			//4<8，对齐值为4
				long long d;//8>=8，对齐值为8
			}yy1;    			
			
			/* 按照1字节对齐，大小为15 
			 * 按照1自己对齐后，成员之间时紧密排列在一起的。
			*/
			#pragma pack(1) //对齐系数为1
			struct kk2
			{       
				char a;			//1>=1，对齐值为1
				short b;		//2>=1，对齐值为1
				int c;			//4>=1，对齐值为1
				long long d;//8>=1，对齐值为1
			}yy2;     		//1>=1，对齐值为1
			#pragma pack()
			
			
			/* 按照4字节对齐，大小也为16 */
			#pragma pack(4)
			struct kk3
			{       
				char a;			//1<4，对齐值为1
				short b;		//2<4，对齐值为2
				int c;			//4>=4，对齐值为4
				long long d;//8>=4，对齐值为4
			}yy3;    			
			#pragma pack()
	
			void main(void)
			{	
				printf("%d\n", sizeof(struct kk1));
				printf("%d\n", sizeof(struct kk2));
				printf("%d\n", sizeof(struct kk3));
				
				return 0;
			}
			打印结果： 
			16
			15
			16
			
			结构体的内存结构图。
			图3：
			
			
			
			
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
					
1.6.4 结构体手动对齐2：使用GCC的对齐指令__attribute__((aligned(n)))来对齐
		__attribute__和aligned(n)是独立的关键字，而且是GCC编译器支持的特有关键字。	
	
	
	・ __attribute__
			实际上我们在第2章就讲过__attribute__，该关键字用于设置属性，比如设置函数的属性、变量的属性、
		类型的属性等。
			设置属性的格式为__attribute__(属性)，设置属性的目的是为了控制编译器对被修饰代码的优化。
			通过__attribute__设置变量的对齐，其实就是在设置变量的属性。
			
			__attribute__关键字的用法很多，而且好些都是冷门用法，而且只有在Linux下才能见到，因此我们没有必要去
		刨根问底，我们对待__attribute__的原则就是，知道它大概的作用，以后遇到没见过的用法时，我们再有针对性
		了解，这样才是最合理。
		
			不仅是__attribute__，凡事与__attribute__相似的知识点，我们都应该采用这样的对待方式，只有这样，
		才能有效的提高我们的学习效率和工作效率，否者那你会发现，永远都有一堆的东西学不完，事实上这些玩意
		并不会妨碍我们的正常工作，但是就是因为我们太过纠结，结果把自己搞的很痛苦。
			
	・ aligned(n)：指定按照n字节对齐，n为对齐系数，与pack(n)是类似的。			
				
	
（1）为什么要讲GCC对齐命令？
			我们这之所有要讲__attribute__((aligned(n)))，是因为在进行Linux嵌入式开发时，在Linux源码中可能
		会见到，所以我们需要了解。
		
		
（2）#pragma pack(n)与__attribute__((aligned(n)))的区别
		1）相似处
				都是手动指定n为对齐系数，进行手动对齐。
		
		2）不同之处 
			（b）n的取值不同
					・ #pragma pack(n)
						n的值为1/2/4/8/16，再大没有意义。
			
					・ __attribute__((aligned(n)))
						n必须为2的幂次，如果不为2的幂次，编译会报错。
						而且，n可以指定的很大，指定为一个很大数是有意义。
						
			（b）规则有所不同。
				・ #pragma pack(n)
					结构体的大小为最大对齐值的整数倍。
		
				・ __attribute__((aligned(n)))
					结构体的大小为n的整数倍。

			
（3）例子			
			struct kk2
			{       
				char a;	 			//1<32，a的对齐值为1	
				short b; 			//2<32，b的对齐值为2	
				int c;			 	//4<32，b的对齐值为4		
				long long d; 	//8<32，d的对齐值为8
			}__attribute__((aligned(32))) yy2;    //yy2的大小为32的整数倍。
			


			void main(void)
			{	
				printf("sizeof(yy2) = %d\n", sizeof(yy2));
				printf("%d\n", sizeof(yy2) % 32); //打印结果为0，说明整个结构体变量的大小为32的整数倍
				
				return 0;
			}
			
			打印结果：32   刚好能够整除32
			
			为了实现是32的整数倍，最后必须补足空间，让大小为32的整数倍。
			
			
			yy2的结构图：
			图4：
			
			
（4）手动对齐的意义（作用）
			本来想介绍一下手动对齐的作用的，但是在没有具体应用背景的情况下，介绍手动对齐作用的例子有些不好理解，
		所以现在大家只需要知道如下几点即可：
		
		（1）知道结构体默认就是对齐的
		（2）理解对齐的规则（不需要记忆，理解即可）
		（3）知道什么是手动对齐，当以后涉及到手动时，基于现在所学的基础知识，大家能够自己去理解搞定
		
			不过有一点可以向大家肯定，在应用开发中，手动对齐用的非常少，只有在偏底层开发中会稍多些。
			
		
（5）__attribute__((packed)))
		1）作用
				__attribute__((packed))用于取消对齐，所谓取消对齐其实就是按照1字节对齐，等价于
			__attribute__((aligned(1)))。
			
			
		2）虽然__attribute__((aligned(1)))和#pragma pack(1)都是按照1字节对齐的，但是二者有区别
		
			（a）#pragma pack(1)
					按照1字节对齐，成员之间是紧密排列在一起的，成员间没有空隙，而且整个大小就是各个成员之和。
			
			（b）__attribute__((aligned(1)))
					按照1字节对齐后，成员之间也是紧密排列在一起的，成员间也没有空隙，但是在最后面可能会补字节
				空间，至于是补多少个字节，由编译器根据实际情况而定，并没有具体的规则。
						
					所以使用__attribute__((aligned(1)))或者__attribute__((packed))来1字节对齐的话，由于会补充
				字节缘故，整个大小并不会刚好等于各个成员之和，而是>=各个成员之和，到底是>还是=，这个就要看编
				译器怎么解释了。
				
					
		3）例子
			//按照1字节对齐，大小刚好为各个成员之和，为15
			#pragma pack(1)  
			struct kk1
			{       
				char a;			//1>=1，对齐值为1
				short b;		//2>=1，对齐值为1
				int c;			//4>=1，对齐值为1
				long long d;//8>=1，对齐值为1
			}yy2;  //15   
			#pragma pack()
			
			//按照1字节对齐，但是最后补了1个字节，所以大小位16
			struct kk2
			{       
				char a;			//1>=1，对齐值为1
				short b;		//2>=1，对齐值为1
				int c;			//4>=1，对齐值为1
				long long d;//8>=1，对齐值为1
			}__attribute__((aligned(1))) yy2;  //等价于__attribute__((packed))
	
			void main(void)
			{	
				printf("%d\n", sizeof(struct kk1));
				printf("%d\n", sizeof(struct kk2));
				
				return 0;
			}
			打印结果： 
			15 
			16 
			
			结构图。
			图5：

			
			
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
			
1.7 offsetof宏和contaner_of宏 
	・ offsetof宏：由c标准库的stddef.h，只要包含这个.h，就可以使用这个宏
			有关stddef.h，我们在第5章介绍c标准库的头文件时，我们提到过这个.h，不知道大家还有印象没有。
	
	・ contaner_of宏：这个是Linux内核的kernel.h所提供的宏。
		
		其实完全可以自己定义并使用这两个宏，只要你理解了这两个宏的原理，定义这两个宏非常容易。
	
	
1.7.1 访问结构体成员的原理

（1）结构体变量指针 与 第一个成员的指针

		“结构体变量的指针”为结构体变量第一个字节的地址，恰好也是第一个成员的第一个字节的地址，
		图6：
		
		
		如果地址的类型“结构体指针类型”，通过这个指针访问的就是整个结构体变量的空间，如果为第一个成员的指针
	类型，通过这个指针访问的就是第一个成员的空间。
	
（2）.和->访问成员的原理是一样的

			不管是通过.和->（(*p).）方式来访问，最终都是“结构体变量指针+成员偏移量”得到成员指针（成员地址），
		然后通过成员指针去访问里面的每个成员。

			之所以是相加而不是相减，是因为结构体变量的第一个成员都在低地址位置，后面的成员都在高地址位置。
			图8： 
			
			
			
（3）通过成员来访问外部结构体变量

			通常情况下，我们都是先得到外部结构体变量的指针，然后再去访问里面的成员。	
		
		但是反过来，如果我们得到了某个成员的指针之后，能不能通过成员指针计算得到“外部结构体变量”的指针？
		答：当然可以。	
			
			p. p->
			结构体变量的指针 + 成员偏移 = 成员指针   （这个计算过程，由编译器自动计算完成）
		
			反过来：
		
			结构体变量的指针 = 成员指针 - 成员偏移   （这个需要由我们自己写的代码来计算）
			
			
		offsetof和contaner_of宏就上面的计算公式的具体实现，通过offsetof和contaner_of宏，就可以利用
	“成员指针”计算出“外部结构体变量”的指针。
		
		我们后面讲Linux内核链表时，内核链表的实现核心，就是通过成员指针来计算出外部结构体变量的指针，
	所以我们一定要搞清楚这两个宏的工作原理。
		
		
1.7.2 offsetof宏
（1）作用
		用于计算成员指针与结构体变量指针间的偏移量。
		
		每个成员具体的偏移量是多少，这个与结构体成员的对齐方式有关。
		
		
（2）使用举例	
		#define offsetof(TYPE, MEMBER)		((int) & ((TYPE *)0->MEMBER))
		
		struct Test
		{
			char a;
			int b;
			short c;
		}ts = {'a', 100, 10};
		
		int main(void)
		{	
			int offset = 0;
			
			offset = (int)&(ts.c) - (int)&ts;
			printf("&ts.c - &ts	= %d\n", offset);
			
			offset = offsetof(struct Test, c);
			printf("offset 	    = %d\n", offset);
			
			return 0;
		}	
		
		通过打印结果可知，通过offsetof所得到的偏移，与(int)&(ts.c) - (int)&ts所得到的偏移是一样的，
		所以使用offsetof来计算机成员的偏移是没有问题的。
		
			
（2）offsetof宏的工作原理

		1）((int) & (((TYPE *)0)->MEMBER))的完整写法
		
			( ((int) & (((TYPE *)0)->MEMBER)) -  0  )
					      成员地址                - 结构体变量地址  = 成员的偏移量


		2）具体工作原理
				
				#define offsetof(TYPE, MEMBER)		((int) & ((TYPE *)0->MEMBER))
				
				将例子中的offsetof(struct Test, c)进行宏替换后，就变为了
				(((int) & (((struct Test *)0)->c)) -  0)
		
		
			・	((struct Test *)0)：
					将0地址强行转换为struct Test *类型的指针，然后使用0这个指针，就能以“struct Test”的结构
				去访问0地址往后的sizeof(struct Test)大小的空间，此时0是结构体变量的首字节地址。
					图：
					
					
					
					程序基于OS运行时，实际上0地址并没有对应合法空间，我们这里只是在借助0地址来进行“模拟”计算，
				只要不对0地址进行解引用，就不会导致指针错误。
				
					编译器在编译(((int) & (((struct Test *)0)->c)) -  0)时，就会按照struct Test这个类型去模拟计算，
				不涉及0地址的解引用，只要不接应就不会导致指针错误。
				
				
			・ (int) & (((struct Test *)0)->c)
					得到成员c地址，然后强制换为int类型，之所以转为int，主要为了方便后续的算数运算，得到成员的
				偏移量。
				
			・ ((int) & (((struct Test *)0)->c)) - 0 
				
					“成员c的地址 - 结构体变量地址(0)”，自然就得到了成员的偏移。
				
					我们既然已经理解了offsetof宏的工作原理，那么0实际上可以改为任何数字，比如：
					(((int) & ((TYPE *)1011->MEMBER)) -  1011)
				
					编译器在编译offsetof宏时，只是在使用结构体类型来模拟计算成员的偏移，不涉及真实的解引用，不用
				担心指针错误的问题。

				
				


出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
	
		offsetof(struct Test, c)：只要将结构体类型和成员名给它，就能自动计算出成员的偏移量。			
				
1.7.3 contaner_of宏 			
		contaner_of嵌套了offsetof，既然前面已经把offsetof搞清楚了，那么contaner_of也自然不难理解。

（1）contaner_of宏的作用
		这个宏的作用就是，通过“成员指针” - “成员偏移”，计算得到外部结构体变量的指针。
			
（2）例子
		#define offsetof(TYPE, MEMBER)		((int) & (((TYPE *)0)->MEMBER))
		#define container_of(ptr, type, member) (type *)((char *)ptr - offsetof(type, member))
		
		struct Test
		{
			char a;
			int b;
			short c;
		}ts = {'a', 100, 10};
		
		int main(void)
		{	
			printf("%d\n", &ts);
			printf("container_of(&ts.c, struct Test, c) = %d\n",  container_of(&ts.c, struct Test, c));
			
			return 0;
		}	
		
		
（3）container_of的原理
		#define container_of(ptr, type, member) (type *)((char *)ptr - offsetof(type, member))
		
		1）container_of(ptr, type, member)的参数
			（a）ptr：成员指针
			（b）type：结构体类型
			（c）member：成员名
		
		
		2）通过宏替换来分析原理

			对例子中container_of(&ts.c, struct Test, c)进行宏替换后，就得到了如下结果
		
				(struct Test *) ((char *)&ts.c - ((int) & ((struct Test *)0->c))
		                       成员c的指针 -           成员c的偏移       

													
		   得到结构体变量的地址后，再强制转为struct Test *，那么这个地址就一个真正的struct Test *的指针了。
		
		    int   int *
			
				疑问：成员指针为什么要强转为char *？
				答：通过第4章节所讲的指针运算，假设是int *的话，“成员指针 - 成员偏移”时就变成了
				“成员指针 - 成员偏移”，显然是不对的，当然将char *写成void *也是可以的。
				
				
			
（4）Linux下的container_of宏
		在前面就说过，container_of宏定义在了Linux内核的kernel.h中，只是Linux下kernel.h总的container_of宏，
	在形式上看起来会稍微复杂一些，当然原理都是一样。
		
		kernel.h中container_of的原型：
			#define container_of(ptr, type, member)\
					({ \
						const typeof( ((type *)0)->member ) *__mptr = (ptr);\
						(type *)( (char *)__mptr - offsetof(type,member) );  \
					})
			
			相比我们自己定义的container_of来说，多了一句const typeof( ((type *)0)->member ) *__mptr = (ptr);	
		而且还被({  })包括起来了。
			
		
		1）const typeof( ((type *)0)->member ) *__mptr = (ptr)
			（a）typeof(((type *)0)->member)
					先通过typeof关键字提取出成员的类型，如果成员类型为int，那么提取得到int这个类型。
					
					假设提取到的类型为int，const typeof( ((type *)0)->member ) *__mptr = (ptr)
					可以被简化为：
					const int *__mptr = (ptr)

			（b）const typeof( ((type *)0)->member ) *__mptr = (ptr)
					・ 利用提取到的“成员类型”定义一个指针变量__mptr。
					・ 将“成员指针”从ptr转放到__mptr指针变量中，并修饰为const
						计算结构体指针时则使用__mptr，而不是使用ptr。
									
					疑问：为什么不直接使用ptr？
					答：直接使用ptr也是可以的，但是直接使用ptr存在风险，假如操作失误，很有可能会通过ptr这个指针
					把成员的值给修改了。
						但是转到__mptr中后，由于__mptr被const修饰了，操作__mptr时是无法修改成员的，
					自然就避免了这种风险，显然更加的安全。
					
						有关const对指针的修饰，请大家看第4章《指针 与 函数》，有详细介绍。
						从这里可以看出，OS内核代码是非常严谨的。
						
						
		2）通过宏体换来分析
			#define container_of(ptr, type, member)    (type *)((char *)ptr - offsetof(type, member))
			
			struct People *p =  container_of(&ts.c, struct Test, c);
				
				进行宏替换后：
			
			struct People *p = ({
													 const typeof( ((struct Test *)0)->c ) *__mptr = (&ts.c); 
			                     (struct Test *)( (char *)__mptr - offsetof(struct Test, c));
													});                        &ts.c
																							
			第二条语句的计算结果会赋给p，类似如下情况：
			
			int a = ({
								int aa=10; 
								int b = aa+20; 
								b+40; //最后一句话的相加结果会交给a，
								      //最后一个不能包含类型，比如int c = b+40，int c是无法编译通过的
								
							}); 
			
			疑问：({...; ...; ...;})有什作用？
			答：这个是gcc支持特有的一种语法，换一个gcc以外的其它编译器（windows c编译器），将无法识别。
			加上这个到底有什么作用，我们在第8章中会解释。
			
			
（5）typeof关键字	
			前面说过，typeof关键字的作用是用于提取变量、数据的类型，比如：
				
			int a;
			typeof(a) b = 10;  			 //等价于int b = 10
			
			typeof(10.33) c = 20.5;  //等价于 double c = 20.5
			
			printf("%d\n", b);
			printf("%f\n", c);
			
			不过typeof这个关键字是GNU标准扩展的关键字，在C标准中并不支持这个关键字，当出现如下两种情况时，
		typeof将无法使用：
		
			1）使用的不是gcc编译器
					这个是GNU标准的扩展关键字，gcc是GNU推出的编译器，所以如果使用的不是这个GNU的gcc编译器的话，
				可能无法识别typeof。
				
			2）使用的是gcc编译器，但是如果指定编译标准时，指定为-std=c99或者c11等c标准，将也无法识别，
				因为c标准不支持，只有指定-std=gnu99或者gnu11等gnu标准时才能识别，默认情况下gcc编译时，都是按
				照gnu标准来编译的，如果我们在编译时特意的指定-std=c99选项的话，是无法编译通过的。
				演示：
				

				
				
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
		
1.8 结构体内嵌函数指针（结构体封装函数指针）
		很多同学对于结构体内嵌函数指针的用法，感觉很神秘，往往也容易神化这种用法，介绍完本小节之后，你会
	发现并没有什么可值得神秘和神话的，它不是什么万能钥匙。
		
		
1.8.1 代码分层
（1）我们以单片机为例来介绍分层
		在单片机程序中，代码分为两类，分别是：
	
	・ 驱动代码：读写寄存器，直接控制硬件工作的代码就是驱动代码。
	・ 应用代码：与读写寄存器无关，只是会间接的调用“驱动代码”。
	
		1）51单片机：
				由于51单片机比较简单，所以在51单片机程序中，驱动代码和应用代码一般混在一起的，没有明显的区分，
			比如将“驱动代码”和“应用代码”写在一个函数中，或者同一个文件中，这就是混在一起，没有明显的区分。
				对于简单的单片机来说，区不区分“驱动代码”和“应用代码”问题不大，这就跟一个小仓库一样，因为仓库很
			小，就算物品混乱一点也问题不大。
				
				
		2）stm32单片机：
				stm32单片机相比51来说复杂了很多，如果驱动代码和应用代码再不做区分的话，不管是对于程序的开发、
			还是代码的维护，都会带来很多的麻烦。这就好比当一个仓库变的很复杂时，如果对里面的物品再不做分层
			和区分的话，会带来很大的管理麻烦。
					
				推出stm32单片机的ST公司帮我们进行了分层，ST公司专门封装出了“驱动函数库”，这些库函数只做一件事，
			那就是读写寄存器、控制硬件，我们自己写的代码则负责调用“驱动库函数”，与读写寄存器的硬件控制没有直
			接关系，我们自己写的调用“驱动库函数”的代码就是“应用代码”。
			
				如此一来就有了明显的分层：
														
														 我们写的应用代码  （调用驱动库函数）
																		|
																		|
																		V
															ST驱动库函数 （读写寄存器，控制硬件） 
			
								
					如果我们在中间再加一层OS，就变成了非常经典的三层结构。
														 我们写的应用代码  
																		|
																		|
																	 OS（操作系统）
																		|
																		|
															ST驱动库函数 （读写寄存器，控制硬件） 
					
								
					以上只是一个大的分层，而且并不是所有的分层都是这样的，在这里我们只是想通过这个经典分层结
				构来介绍什么是分层思想。刚说过，以上这个分层只是一个大的分层，实际上在应用代码、OS、驱动代码
				内部还会进行更详细的代码逻辑分层，不管是那种分层，分层的思想和目的都是相似的。
			
					当然，我们作为应用软件开发工程师来说，我们写的大多都是应用代码，那么我们常见的分层实际上是应用
				代码内部的逻辑分层，理解分层思想，不管是对于自己写代码，还是阅读源码，都是有一定益处的。
						
（2）分层的意义和好处
		1）合理架构
				当软件代码复杂之后，必然要对代码进行一个逻辑分层，只有这样代码才能够更合理的被组织架构，这就
			好比在现实中实现一个大型项目时，也需要对项目进行合理的组织架构，道理都是相通的。
				
		2）分工合作，提高开发效率
				分层之后，不同层可以由不同的人员来分工合作完成，如此可以有效的提高开发效率。
				・ 写应用代码的：专门实现应用的代码
				・ 写中间层的：专门实现中间层的代码
				・ 写底层驱动的：专门实现底层驱动的代码
	
				比如stm32单片机程序分成了应用层和驱动层，应用代码就由单片机产品工程师开发，而驱动库函数代码则由
			stm32原厂工程师实现，以库的形式来提供，如此分工合作，术业专攻，这才应有的开发合作模式。

		3）有利于代码维护、升级
				合理分层的软件代码，更加有利于维护和升级时，如果代码没有分层，各种功能的代码胡乱的交织在一起，
			那么在维护升级软件时，改一个地方往往会导致n多个地方需要被修改，当这些n多个地方被修改时往往又会
			导致更多的地方被修改，对于软件维护和升级开说将是个大麻烦。
				
				但是如果软件代码进行了合理的分层的话，维护和升级时的改动，就只需要改动某层内部的某些代码，不会
			波及其它层的代码，不会导致大面积的修改，显然会给维护和升级带来极大的方便。
			
				很多同学对于海量级代码可能没有什么感觉，当软件代码为海量级别时，如果软件分层（框架）不合理的话，
			会带来极大的痛苦。当然对于嵌入式开发来说，由于嵌入式开发的特殊性，事实上嵌入式软件的代码体量相对
			会小很多，小归小，也是涉及到分层的。
			
				
（3）层与层之间的对接
		1）靠函数接口来对接
			层之间是通过函数接口来对接的，接口有两种，一种是纯单向的，另一种是双向的。
		
		（a）单向
				仅某个层单方面提供函数接口，比如应用代码与OS对接，一般来说仅OS提供函数接口（OS API），应用代
			码调用OS函数接口，反过来OS一般不会调用应用代码的函数。
		
		（b）双向
				分层的双方都会给对方的函数接口，以供对方调用。
		
		2）不同层之间如何传递信息?
				显然是通过函数参数来传递信息的，当要传递的信息非常丰富时，往往会使用结构体来封装，而且有时还会
			封装函数指针。
				
				前面说过，在c的结构体中是不能直接定义函数的，但是可以存放函数指针，因此这种有函数指针的结构体
			与c++、java的可以在内部定义函数的“类”有一定的相似性，因此我们把这种结构体内有函数指针情况，称为
			是在模拟“面向对象”思想，当然这个说法并不准确。
				
				
1.8.2 正式介绍结构体封装函数指针		
	
		前面而介绍分层时，应用代码、OS、驱动之间这种大的分层，我们使用“结构体封装函数指针”，与这种大的分
	层之间没什么关系，而是往往与代码内部的逻辑分层有关，一个好的c程序，在功能实现上一定有逻辑分层，在前
	面就说过，这样的话不仅方便开发，也方便维护升级。

		
（2）例子
		1）例子功能
		
			有两个结构体数组，分别放了的学生和老师的信息，然后对这些数据进行如下两种操作：
			・ 打印显示数据
			・ 修改数据 
			
			
				由于操作学生和老师的代码具有很高的相似性，所以就从里面提取出“公共代码”，操作学生和老师的
			具体代码就为差异性代码，这么做的好处就是，如果以后还需要操作什么其它的人员数据，公共代码部分不
			需要改动，都是共用的，只需要添加具体的差异性代码，然后对接公共代码即可，非常的方便。
			
																			 main函数
			                                    |
			                                    |调用公共代码的“显示函数”
																					|调用公共代码的“修改函数”
																					|
																																				
																			 公共代码		
																					|
																					|显示数据函数   （对接差异代码的显示函数） 
																					|修改数据函数   （对接差异代码的修改函数） 
																					|
				
			   差异代码――学生                    差异代码――老师                 差异代码――其它人员
						|                                 |                               ... 
				   	|（对接公共显示）                 |（对接公共显示）               ... 
						|显示学生数据的函数               |显示老师数据的函数  
						|                                 |
						|（对接公共修改）                 |（对接公共修改）  
						|修改学生数据的函数               |修改老师数据的函数 
						|                                 |
			
			
				公共代码与差异代码之间，明显是两个分界线很明显的逻辑分层。
				问题是公共代码与差异代码之间，如何进行对接呢？那么这个就需要用到“结构体封装函数指针”的做法，
			当然，不仅需要封装函数指针，还需要封装备操作的数据。


			
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
					
		2）代码的逻辑结构
			图9：
					
				
				通过这种方式，可以将各个模块有效独立出来，以后添加其它模块时，不会导致其它模块被大动干戈的修改，
			但是如果所有代码搅在一起的话，添加新的模块时，很容易导致整个代码被动大量修改。
				
				由图中可知，公共代码通过“回调函数”来调用差异代码的函数时，只需要使用函数指针即可调用，不需要
			直接使用函数名来调用，避免了“公共代码”也被差异化。
				大家试想下，如果在公共代码中，直接通过Stu_print函数名来调用“显示学生数据函数”，那么调用老师的
			Tea_print函数时，公共代码就没法兼容了，如此一来公共代码就不再是“公共代码”了，也是一个有差异性
			的代码。
				
				我们将公共代码独立出来后，添加操作新人员信息的差异性代码时，只要使用registerFun函数，向
			“公共代码”登记操作信息即可，然后公共代码就可以回调差异代码的函数了。
					
					
					
					
		3）代码 
				stu.h、stu.c: 差异性代码――操作学生
				
				tea.h、tea.c: 差异性代码――操作老师
				
				public.h、public.c：公共代码――对接差异性代码
				
				main.c：主函数所在.c
				
				
			（a）stu.h、stu.c 
					・ stu.h：
						#ifndef H_STU_H
						#define H_sTU_H

						/* 学生结构体 */
						typedef struct Student
						{
								char name[20];  //名字
								int stuNum;     //学号
								float score;    //分数
						}Stu;

						/* 学生函数的声明 */
						//全局函数
						extern void Stu_initFun(int n, stu buf[]);  //全局函数

						//本地函数
						//被毁掉的函数,是通过函数指针来调用的,此时完全可以定
						//义为本地函数,定义为本地函数,可以更好的提高函数的安全性
						static void Stu_alter(int n, void *buf);
						static void Stu_print(int n, void *buf);

						#endif

						
					・ stu.c
						#include <stdio.h>
						#include "public.h"
						#include "stu.h"

						//用于封装操作学生的基本信息
						static struct Register reg = {}; //初始化为0

						/* 功能:初始化操作,向"公共代码"注册操作学生的信息
						 *      注册的信息为"学生结构体素组" 和 "操作学生数据的函数"
						 * 参数:
						 *   n: 学生结构体数组的元素个数
						 *   buf: 数组首元素指针
						 */
						void Stu_initFun(int n, Stu buf[])
						{
								/* 使用struct Register结构体封装操作学生的信息 */
								reg.n = n;                      //学生结构体数组的大小
								reg.buf = (void *)buf;          //学生数组的首元素指针,公共代码不区分具体的类型 
								reg.print = Stu_print;          //打印学生数据的函数指针,让公共代码回调 
								reg.alter = Stu_alter;          //修改学生数据的函数指针,让公共代码回调

								/* 向公共代码注册,所谓注册就
								 * 是将封装的结构体传递公共代码,
								 * 让公共代码通过这些信息来操作学生数据 */
								registerFun(&reg);
						}


						/* 功能: 通过学号找打某个学生,然后修改学生数据
						 *       这个函数由"公共代码"回调,公共代码会讲数组的n和buf传递回来 
						 * 
						 * 参数: 
						 *  n:数组元素个数
						 *  buf: 数组的首元素指针
						 *       公共代码只记录存储的地址,不区分具体的类型,所以为void *
						*/
						static void Stu_alter(int n, void *buf)
						{
								int i = 0;
								int stuNum;
								Stu *stu = (Stu *)buf;                  //强制转为具体Stu *, 如此才能进行具体的操作

								printf("输入学号: ");
								scanf("%d", &stuNum);

								for(i=0; i<n; i++)
								{
										if(stu[i].stuNum == stuNum)     //进行学号比对
										{
												printf("%s %d %f\n", stu[i].name, stu[i].stuNum, stu[i].score);

												printf("输入新信息\n");
												scanf("%s %d %f", stu[i].name, &stu[i].stuNum, &stu[i].score);
												break;
										}
								}

								if(i == n) printf("无此学生\n");

						}

						/* 功能: 显示所有学生的信息, 由"公共代码"回调
						 * 参数: 同Stu_alter
						*/
						static void Stu_print(int n, void *buf)
						{
								int i = 0;
								Stu *stu = (Stu *)buf;

								for(i=0; i<n; i++)
								{
										printf("%s %d %f分\n", stu[i].name, stu[i].stuNum, stu[i].score);
								}
						}

      （b）tea.h、tea.c                
					・ tea.h 
						#ifndef H_TEA_H
						#define H_TEA_H

						/* 教师结构体 */
						typedef struct Teacher
						{
								char name[20];  //名字
								int teaNum;     //教师编号
								int grade;      //级别
						}Tea;

						extern void Tea_initFun(int n, Tea buf[]);
						static void Tea_alter(int n, void *buf);
						static void Tea_print(int n, void *buf);

						#endif
				
					・ tea.c 
						#include <stdio.h>
						#include "public.h"
						#include "tea.h"

						static struct Register reg = {0};

						void Tea_initFun(int n, Tea buf[])
						{
								reg.n = n;
								reg.buf = (void *)buf;
								reg.print = Tea_print;
								reg.alter = Tea_alter;

								registerFun(&reg);
						}

						static void Tea_alter(int n, void *buf)
						{
								int i = 0;
								int teaNum;
								Tea *tea = (Tea *)buf;

								printf("输入教师编号: \n");
								scanf("%d", &teaNum);

								for(i=0; i<n; i++)
								{
										if(tea[i].teaNum == teaNum)
										{
												printf("%s %d %d\n", tea[i].name, tea[i].teaNum, tea[i].grade);
												printf("输入新信息\n");
												scanf("%s %d %d", tea[i].name, &tea[i].teaNum, &tea[i].grade);
												break;
										}
								}
						}

						static void Tea_print(int n, void *buf)
						{
								int i = 0;
								Tea *tea = (Tea *)buf;

								for(i=0; i<n; i++)
								{
										printf("%s %d %d级\n", tea[i].name, tea[i].teaNum, tea[i].grade);
								}
						}
						
			（c）publc.h、public.c
					・ public.h  
						#ifndef H_PUBLIC_H 
						#define H_PUBLIC_H


						/* 用于想公共代码注册操作信息的结构体 */
						struct Register
						{
								void *buf;      //数组第一个元素的地址
								int n;          //数组元素个数

								void (*print)(); //打印函数的指针
								void (*alter)(); //修改函数的指针
						};

						extern void registerFun(struct Register *reginfo);
						extern void printFun(void);
						extern void alterFun(void);

						#endif
						
					 
					・ public.c
						#include <stdio.h>
						#include "public.h"

						//保存差异代码注册的"reg"结构体,里面等封装了操作信息
						struct Register *regp = NULL;

						/* 注册函数,注册的过程就是记录下"差异代码"传递过来的reg的指针 */
						void registerFun(struct Register *reginfo)
						{
								regp = reginfo;
						}

						/* 显示所有信息 */
						void printFun(void)
						{
								/* 通过注册的reg信息, 通过函数指针, 调用差异代码的"显示函数",
								 * 如果注册的是"学生操作信息",调用的就是学生的"显示函数",否者就是老师的"显示函数"
								 * 
								 * 调用时, 将"数组元素个数"和"数组首元素指针"传递给下层的差异代码,
								 * 差异代码拿到"数组"后,就可以操作数组中的数据了
								 */
								regp->print(regp->n, regp->buf);
						}

						void alterFun(void)
						{
								/* 修改数据,操作原理是一样的 */
								regp->alter(regp->n, regp->buf);
						}
						
			（d）main.c 
					#include <stdio.h>
					#include "public.h"     //公共代码的.h
					#include "stu.h"        //差异代码---操作学生信息代码的.h
					#include "tea.h"        //差异代码---操作老师信息代码的.h 

					#define STUNUM 6        //学生结构体数组的元素个数
					#define TEANUM 7        //老师结构体数组的元素个数

					/* 存放"学生"数据的结构体数组  */
					Stu stu[STUNUM] = {
							{"张  三", 1, 65.0},
							{"李  四", 2, 34.5},
							{"李  雪", 3, 99.5},
							{"宋  朋", 4, 75.0},
							{"黄明明", 5, 60.5},
							{"周  华", 6, 85.5},
					};

					/* 存放"老师"数据的结构体数组  */
					Tea tea[TEANUM] = {
							{"黄  蓉", 1, 1},
							{"杨  康", 2, 4},
							{"周伯通", 3, 6},
							{"郭  靖", 4, 6},
							{"欧阳锋", 5, 8},
							{"杨  过", 6, 2},
							{"吴  邪", 6, 2},
					};

					/* 主函数 */
					int main(void)
					{
							int select = 0;  //操作选择

							while(1)
							{
									printf("1. 操作学生\n");
									printf("2. 操作老师\n");
									scanf("%d", &select);

									if(1 == select)
											Stu_initFun(STUNUM, stu); //初始化学生的操作
									else if(2 == select)
											Tea_initFun(TEANUM, tea); //初始化老师的操作

									/* 选择初始化的谁,具体操作的就是谁 */
									while(1)
									{
											printf("1. 显示信息\n");
											printf("2. 修改信息\n");
											printf("3. 重新选择操作对象\n");
											scanf("%d", &select);

											if(1 == select) printFun();      //打印信息
											else if(2 == select) alterFun(); //修改信息
											else if(3 == select) break;
											else printf("无此选项\n");
									}

							}

							return 0;
					}

			
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
	
					
（3）真实案例――Linux驱动中的平台总线				
			这里说的平台总线是代码，不是真的“线”。
			
			平台总线的目的是用来管理和对接底层各种不同的驱动代码，所以平台总线的代码为公共代码，为了对接
		底层不同驱动的驱动代码，就需要使用“结构体来封装函数指针”，然后向平台总线代码登记，如此平台总线
		就可以利用登记的不同“操作信息”来调用不同驱动的函数，从而控制不同的硬件工作。

			图10：
			

（4）不要神话“结构体封装函数指针”
		1）并不是只要结构体封装了函数指针，就一定涉及到分层与回调
				有些时候使用结构体封装函数指针，与分层和回调毫无关系。
		
		2）并不是只要涉及到分层，就一定会使用“结构体封装函数指针”
				如果分层之间，不涉及到“公共代码”与多个“差异代码”对接的话，不需要使用"结构体封装函数指针"。
			比如，我们后面讲链表时，我们写的链表程序就涉及到简单的分层，但是并不需要使用"结构体封装函数指针"。
	
				只有当涉及到同一份公共代码，需要与好多不同的差异代码对接时，可能才需要用到"结构体封装函数指针"
			，所以没有必要神话"结构体封装函数指针"，不要动不动就使用这种方式，这是需要有一定的应用环境的。
						
				就算公共代码需要与多个差异代码对接，这也要求不同差异代码之间一定要要有相似性，比如我们例子中操
			作学生和老师的代码，就有很高的相似性，如果差异代码之间的差别实在是太大的话，差异代码的操作信息，
			很难被封装同一个结构体里面。
			
				我们的例子比较简单，其实完全没必要写成“公共代码”+“差异代码”的形式，这么做的目的主要是为了介
			绍"结构体封装函数指针"的使用场合和作用，一般只有当代码具有一定复杂度，而且也符合“公共代码”+
			“差异代码”的逻辑结构时，才会使用“公共代码”+“差异代码”的形式。	



			
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------				
				
		
2. 共用体
	在早期，共用体也被称为联合体，不过现在都习惯称为“共用体”。

2.1 共用体 与 结构体的异同
2.1.1 相同点
	操作语法基本是相同的，比如各自都可以使用.和->来访问成员。
	
2.1.2 不同点
		在结构体中，每个成员拥有的都是独立的空间，但是在联合体中，所有所有成员共用相同的空间，整个联合体的
	空间大小为最大成员的大小，通过不同成员来访问时，会按照各自成员的类型来解释是空间。
		union my_un1
		{
			int a;         //4字节
			long long b;	 //8字节
			double c;      //8字节
		}un1;

		整个联合体的大小为8个字节。
		
		图11：
		

		
		所有成员共用相同的空间，空间第一个字节地址为所有成员的地址。
		联合体空间中所放的值，以最后一次的赋值为准。
		un1.a = 10;
		un1.c = 12.56;
		
		联合体中放的就是12.56。
		
2.2 当初设计出联合的原因
		联合体的特点是所有的成员共用同一个空间，可以很好的节省内存空间。
		
		在早期，内存空间比较精贵，为了节省内存，于是设计出了联合体这个玩意，随着集成电路的发展，内存空间
	越来越大，节省空间这件事情已经不再像以前那么重要，对于现在的开发来说，如何提高开发效率才是首要的。
		
		正是由于节省内存变的不再像以前那么重要，所以现在联合体用的越来越少，事实上就算没有联合体这个东西，
	我们照样能开发，因为对于联合体来说，除了节省内存外，在功能上完全可以被结构体和指针所替代，所以我们
	才会发现，在实际开发中就算没有使用过联合体，但是并没有觉得有什么不方便。
	
		
2.3 联合体的使用举例
	由于联合体本来就是可有可无的，所以目前联合体的使用非常鲜见，不过在一些库函数和OS API的传参中往往还能
见到联合体的身影，那么联合体在传参中有什么作用呢？我们这里就来讲一讲联合体在函数传参中的使用。

（1）例子1
		1）回顾以前的例子		
			#include <stdio.h>

			void print_fun(int type, void *arg)
			{
					if(1 == type)
					{
							printf("%d\n", *((int *)arg));
					}
					else if(2 == type)
					{
							printf("%f\n", *((float *)arg));
					}
					else if(3 == type)
					{
							printf("%s\n", (char *)arg);
					}
			}

			int main(void)
			{
					int a = 100;
					float b = 20.45;
					char *str = "hello world";

					print_fun(1, (void *)&a);
					print_fun(2, (void *)&b);
					print_fun(3, (void *)str);

					return 0;
			}

			同一个形参需要面对多种实参时，可以使用void *来兼容，实际上我们也可以使用联合来实现。
			
		2）使用联合体来实现：
			#include <stdio.h>

			union Un_Arg
			{
					int arg1;
					float arg2;
					char *arg3;
			};

			void print_fun(int type, union Un_Arg arg)
			{
					if(1 == type)
					{
							printf("%d\n", arg.arg1);
					}
					else if(2 == type)
					{
							printf("%f\n", arg.arg2);
					}
					else if(3 == type)
					{
							printf("%s\n", arg.arg3);
					}
			}

			int main(void)
			{
					int a = 100;
					float b = 20.45;
					char *str = "hello world";
					union Un_Arg arg;

					arg.arg1 = a;
					print_fun(1, arg);
					arg.arg2 = b;
					print_fun(2, arg);
					arg.arg3 = str;
					print_fun(3, arg);

					return 0;
			}
				
		显然就算没有联合体这个玩意，我们也可以使用void *等方式来代替。
				
（2）例子2
		我们举一个Linux OS API的例子。
		
		int semctl(int semid, int semnum, int cmd, ...);
		
		
		...表示是变参，参数是不确定（参数个数和参数类型都不确定），OS API此时就使用联合体来应对这个变参。
		
		union semun 
		{
			 int              val;    /* Value for SETVAL */
			 struct semid_ds *buf;    /* Buffer for IPC_STAT, IPC_SET */
			 unsigned short  *array;  /* Array for GETALL, SETALL */
			 struct seminfo  *__buf;  /* Buffer for IPC_INFO(Linux-specific) */
		};

	 
		 调用举例：
		 union semun arg4;
		 arg4.val = 2;
		 
		 semctl(***, ***, ***, arg4.val);
		 
		 struct semid_ds semid_buf = {***};
		 arg4.buf = &semid_buf;
		 semctl(***, ***, ***, arg4.buf);
		 
		所以，以后看到在传参中有使用联合体的话，不要感到惊讶，不要不理解人家为什么这么做。

		
		
			
出品：佳嵌工作室
----------------------------------------------------------------------------------------------------------
	“佳嵌工作室”致力于物联网、嵌入式产品以及‘物联网、嵌入式技术课程’的研发，希望所推出的技术课程，能够帮助到
正在努力学习物联网、嵌入式的同学，欢迎大家和我们一起共同学习，共同进步。
----------------------------------------------------------------------------------------------------------							
		
3. 枚举
	其实没有枚举这个东西也是可以的，很多人做了多年c开发，几乎就没有怎么用过枚举，但是也照样开发的很好，
但是在很多C的源码中，枚举的使用频率还是非常高的，因此需要理解枚举是什么，而且枚举也确实有自己的优点，
我们也鼓励大家在自己的代码中多使用枚举。
	在c、c++、java等其它语言中都是有的。

3.1 枚举怎么来的？
	枚举来自于宏定义的不够完美，当然有了枚举后，并不会因此就把宏定义给干掉了，因为在普通情况下，宏定义使
用起来还是非常方便的，不过在某些情况下，使用枚举则会更好些。
	
3.2 宏定义的问题
3.2.1 宏定义是散列的
	#define SUN		0
	#define MON 	1
	#define TUE 	2
	#define WEN   3
	#define THU   4
	#define FRI		5
	#define SAT		6
	
	这些宏定义是散列的，事实上对于一般的宏定义来说，相互之间没有什么关系，所以散列着并没有什么大不了的，
但是对于相互间有关联的宏来说，散列着不利于代码的辨识。

	比如一周的7天，一年的12个月、一个月的30天等宏定义，相互间是有关联的，散列着不利于体现它们之间的相
互关系。


3.2.2 宏定义传参问题
	前面“星期宏”的类型为int型，在传递这些宏时，形参类型就为整形。
	
	void fun(int weekDay)
	{
		pritnf("%s\n", weekDay);
	}
	
	fun(SUN);
	fun(TUE);
	...
	fun(SAT);
	
		fun(100)也是没有问题的，因为100也为int，但是100并不是一周的某一天，并不符合我们传参需求，假如
	传递100是提醒我们，参数不符合要求，那是不是更好呢？显然宏是做不到的，但是枚举能做到。
	
3.2.3 枚举的优势
	宏定义散列的问题，传递宏时参数不符合要求的问题，都可以被枚举解决。
	
	
3.3 枚举的详细情况
3.3.1 枚举类型的定义
	enum week   
	{
		SUM,   //与#define SUM 0 等价 
		MON,   //与#define MON 1 等价
		TUE,
		WEN,
		THU,
		FRI,
		SAT,
	};
		
	以上为一个为枚举类型
（1）enum：枚举关键字，类似union、struct
（2）week：枚举类型的名字
（3）{...}：{}中的为枚举元素（枚举值）
		每一个枚举元素等效于#define定义，比如里面的SUM等效于#define SUM 0，但是与宏不同的是，SUM、MON等
	被{}集中在了一起，不再是散列的,枚举的这种集中化的管理，可以让我们代码具有更高的识别度，让代码变的
	更加的优美。
	
		通过week这个名字，我们一看就知道SUM、MON等就是一周的每一天。
		
3.3.2 枚举元素
（1）枚举元素的值	
		直接通过列子来介绍。
		
		1）enum week{SUM, MON, TUE, WEN, THU, FRI, SAT};
			都没明确给值时，默认情况为，第一个SUM为0，第二个MON为1，第三个TUE为2，后面的依次类推即可。
		
		
		2）enum week{SUM=2, MON, TUE=5, WEN, THU=10, FRI, SAT};		             
				MON=3        
				WEN=6       
				FRI=11  
				SAT=12
		
		3）枚举元素的值必须为整形
			enum week{SUM, MON=12.56, TUE, WEN, THU, FRI, SAT};
			编译时会报错。
			
			这也是枚举的一个缺点，不能指定浮点、字符串、等等，但是宏定义可以：
			#define A   12.56
			#define B   "hello world"
			#define C   PI
			
			宏和枚举各有优缺，是一个相互弥补的关系。
			
			
（2）枚举元素的使用
			每一个枚举元素与宏定义一样，可以被直接使用的，比如
			printf("%d\n", SUM);
			
			int a = SUM + SAT;

			
（3）每一个枚举元素是一个符号常量，不能被赋值
		前面说过，每一个枚举值与#define是等效的，所以每一个枚举值和宏定义一样，都是一个符号常量，不能被赋值。
		
		SUM = 100;
		SAT = 200;
		
		都无法编译通过。
		
3.3.2 枚举变量
（1）如何定义枚举变量？
		enum week   
		{
			SUM,   
			MON,   
			TUE,
			WEN,
			THU,
			FRI,
			SAT,
		}weekday;   
	
		或者： 
		enum week weekday;
		
		weekday为枚举变量。

		
（2）给枚举变量给值
		可以通过初始化或者赋值来给值。
		
		一般情况下，枚举变量只能给自己类型中的枚举值，比如：
		enum week weekday = SUM;  //初始化 
		weekday = MON;						//赋值
		weekday = FRI; 
		...
		
		不能给枚举类型以外的值，比如：
		weekday = 1; //编译器会报错
		
		比如使用VC++这个IDE来测试，weekday = 1是不能编译通过的。
		
		
		正是由于这一特点，传参时如果将宏替换为枚举值的话，如果传递是“非枚举值的话”，就会帮我们报错，比如：
			
			
			如果将fun(WEN)改为fun(100)的话，是无法编译通过的，可以帮我们预防传递错误参数，提高排错效率。
			
			
			不过不幸的是，枚举变量以上的这一特点，只有某些编译器才支持，而有些编译器不支持，VC++使用的是
			windows编译器，支持这一特点，但是gcc编译器并不支持，所以将weekday = 1复制到codeblocks和linux下时，
			确可以编译通过，所以在gcc编译器下，fun(100)这个传参也是能够编译通过。
		
		
3.3.3 总结：何时使用枚举？
	当值为整形，而且相互间有关联时，建议使用枚举，你非要使用宏定义也是可以的，但是如果是字符串、浮点数等等，
就不能使用枚举，只能使用宏定义。
	至于传参这个问题，由于不同的编译器会有不同的情况，因此传参时我们不做硬性规定，传递宏定义和枚举都可以。
	









